{"name":"Gitflow","tagline":"Testing git flow commands to order branches flow","body":"Important!!!!!\r\nFormat of any commit message in a git project\r\nhttps://github.com/erlang/otp/wiki/Writing-good-commit-messages\r\n\r\nExample commit template message\r\n\r\nShort (50 chars or less) summary of changes\r\n\r\nMore detailed explanatory text, if necessary.  Wrap it to about 72\r\ncharacters or so.  In some contexts, the first line is treated as the\r\nsubject of an email and the rest of the text as the body.  The blank\r\nline separating the summary from the body is critical (unless you omit\r\nthe body entirely); tools like rebase can get confused if you run the\r\ntwo together.\r\n\r\nFurther paragraphs come after blank lines.\r\n\r\n - Bullet points are okay, too\r\n\r\n - Typically a hyphen or asterisk is used for the bullet, preceded by a\r\n   single space, with blank lines in between, but conventions vary here\r\n\r\nClose #4 (only if we want this commit close an issue when you merge this commit to your master branch)\r\n\r\n\r\nGITFLOW TESTING PROJECT\r\n=======\r\n\r\nTesting git flow commands to order branches flow, with several branches using labels to\r\nmark several release version on master's branch.\r\n\r\nSee:  https://github.com/nvie/gitflow/wiki/Command-Line-Arguments\r\n      http://blogs.endjin.com/2013/04/a-step-by-step-guide-to-using-gitflow-with-teamcity-part-3-gitflow-commands/\r\n\r\n\r\nGITFLOW COMMANDS AND EQUIVALENT GIT COMMAND\r\n=======\r\n\r\nGitflow commands to use this workflow in a Git Repository and equivalent git command launched. \r\n\r\n\r\n## Initialize\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow init` | `git init`\r\n | `git commit --allow-empty -m \"Initial commit\"`\r\n | `git checkout -b develop master`\r\n\r\n\r\n## Connect to the remote repository\r\n\r\ngitflow | git\r\n--------|-----\r\n_N/A_ | `git remote add origin git@github.com:MYACCOUNT/MYREPO`\r\n\r\n\r\n## Features\r\n\r\n### Create a feature branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow feature start MYFEATURE` | `git checkout -b feature/MYFEATURE develop`\r\n\r\n\r\n### Share a feature branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow feature publish MYFEATURE` | `git checkout feature/MYFEATURE`\r\n | `git push origin feature/MYFEATURE`\r\n \r\nOnce you’ve published the feature your team mates will be able to work on the feature branch with you by cloning the Repository from the centralized Repository and then doing a “git flow init”.  This will set them up to have a Gitflow enabled local Repository with a master and a develop branch.  Once they have a Gitflow enabled Repository they should be in the develop branch on which they should now do a pull to ensure their local Repository is in sync with the one on the remote.  Once this is complete they should be able to follow it.\r\n\r\n\r\n### Get a branch created  shared remote repository\r\n\r\ngit flow feature track MYFEATURE\r\n\r\n\r\n### Get latest for a feature branch remote repository\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow feature pull origin MYFEATURE` | `git checkout feature/MYFEATURE`\r\n | `git pull --rebase origin feature/MYFEATURE (try only git pull --rebase) (remember when a pull is fired commands: fetch + merge)`\r\n \r\n \r\n### Push for a feature branch remote repository\r\n \r\ngitflow | git\r\n--------|-----\r\nN/A | `git checkout feature/myfeature (only if you are out of feature branch)`\r\n | `git push`\r\n\r\n\r\n### Finalize a feature branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow feature finish MYFEATURE` | `git checkout develop`\r\n | `git merge --no-ff feature/MYFEATURE`\r\n | `git branch -d feature/MYFEATURE`\r\n\r\n\r\n### Push the merged feature branch\r\n\r\ngitflow | git\r\n--------|-----\r\n_N/A_ | `git push origin develop`\r\n | `git push origin :feature/MYFEATURE` _(if pushed)_\r\n\r\n\r\n## Releases\r\n\r\n### Create a release branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow release start 1.2.0` | `git checkout -b release/1.2.0 develop`\r\n\r\n\r\n### Share a release branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow release publish 1.2.0` | `git checkout release/1.2.0`\r\n | `git push origin release/1.2.0`\r\n\r\n\r\n###Start tracking release\r\n\r\nStart tracking release <name> that is shared on $ORIGIN\r\n\r\ngit flow release track 1.2.0\r\n\r\n\r\n### Get latest for a release branch\r\n\r\ngitflow | git\r\n--------|-----\r\n_N/A_ | `git checkout release/1.2.0`\r\n | `git pull --rebase origin release/1.2.0`\r\n \r\n (note that there is not any command to pull like on feature's branch)\r\n\r\n### Push for a release branch (remote repository)\r\n \r\ngitflow | git\r\n--------|-----\r\nN/A | `git checkout release/myrelease (only if you are out of feature branch)`\r\n | `git push`\r\n\r\n\r\n### Finalize a release branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow release finish 1.2.0` | `git checkout master`\r\n | `git merge --no-ff release/1.2.0`\r\n | `git tag -a 1.2.0`\r\n | `git checkout develop`\r\n | `git merge --no-ff release/1.2.0`\r\n | `git branch -d release/1.2.0`\r\n\r\n\r\n### Push the merged feature branch\r\n\r\ngitflow | git\r\n--------|-----\r\n_N/A_ | `git push origin master`\r\n | `git push origin develop`\r\n | `git push origin --tags`\r\n | `git push origin :release/1.2.0` _(if pushed)_\r\n\r\n\r\n## Hotfixes\r\n\r\n### Create a hotfix branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow hotfix start 1.2.1 [commit]` | `git checkout -b hotfix/1.2.1 [commit]`\r\n\r\n\r\n### Finalize a hotfix branch\r\n\r\ngitflow | git\r\n--------|-----\r\n`git flow hotfix finish 1.2.1` | `git checkout master`\r\n | `git merge --no-ff hotfix/1.2.1`\r\n | `git tag -a 1.2.1`\r\n | `git checkout develop`\r\n | `git merge --no-ff hotfix/1.2.1`\r\n | `git branch -d hotfix/1.2.1`\r\n\r\n\r\n### Push the merged hotfix branch\r\n\r\ngitflow | git\r\n--------|-----\r\n_N/A_ | `git push origin master`\r\n | `git push origin develop`\r\n | `git push origin --tags`\r\n | `git push origin :hotfix/1.2.1` _(if pushed)_\r\n\r\n\r\n\r\n## References\r\n\r\n - http://nvie.com/posts/a-successful-git-branching-model/\r\n - https://help.github.com/articles/using-pull-requests#shared-repository-model\r\n - Personal experience\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}